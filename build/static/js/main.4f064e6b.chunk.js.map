{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Button","props","style","color","fontStyle","fontSize","type","onClick","text","Notification","message","className","Filter","value","filter","onChange","handler","Numbers","callback","map","person","key","name","number","deleted","Form","onSubmit","nameValue","nameHandler","numberValue","numberHandler","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","setFilter","errorMessage","setErrorMessage","notificationType","setNotificationType","useEffect","personService","list","event","target","preventDefault","numberObject","indexOf","window","confirm","entry","setTimeout","catch","error","console","log","concat","toLowerCase","includes","length","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4f064e6b.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = 'https://shielded-citadel-76663.herokuapp.com/api/persons'\n//const baseUrl = 'http://localhost:3001/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nconst remove = id => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, remove }\n","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\n\nconst Button = (props) => {\n  const buttonStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <button style={buttonStyle} type={props.type} onClick={props.onClick}>{props.text}</button>\n  )\n}\n\nconst Notification = ({ message, type }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className={type}>\n      {message}\n    </div>\n  )\n}\n\nconst Filter = (props) => (\n  <div>filter shown with <input\n    value={props.filter}\n    onChange={props.handler}\n  /></div>\n)\n\nconst Numbers = (props) => (\n  <div>\n    <h2>Numbers</h2>\n    {props.callback().map(person =>\n      <div key={person.name}>{\n        person.name} {person.number}\n        <Button text='delete' onClick={() => props.deleted(person)} />\n      </div>\n    )}\n  </div>\n)\n\nconst Form = (props) => (\n  <form onSubmit={props.onSubmit}>\n    <div>\n      name: <input\n        value={props.nameValue}\n        onChange={props.nameHandler}\n      />\n    </div>\n    <div>\n      number: <input\n        value={props.numberValue}\n        onChange={props.numberHandler}\n      />\n    </div>\n    <div>\n      <Button type='submit' text='add' />\n    </div>\n  </form>\n)\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [filter, setFilter] = useState('')\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [notificationType, setNotificationType] = useState(null)\n\n\n  const hook = () => {\n    personService\n      .getAll()\n      .then(list => setPersons(list))\n  }\n\n  useEffect(hook, [])\n\n  const delNumber = target => {\n    if (!window.confirm(`Delete ${target.name}?`)) return\n    personService\n      .remove(target.id)\n      .then(response => {\n        setPersons(persons.filter(person => person.id !== target.id))\n        setErrorMessage(`${target.name} deleted`)\n        setNotificationType('success')\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      }\n      )\n  }\n\n  const addNumber = event => {\n    event.preventDefault()\n\n    const numberObject = {\n      name: newName,\n      number: newNumber\n    }\n\n    if (persons.map(person => person.name).indexOf(newName) >= 0) {\n      if (!window.confirm(`${newName} is already in the phonebook. Replace number with new?`)) return\n\n      const id = persons.filter(person => person.name === newName)[0].id\n      personService\n        .update(id, numberObject)\n        .then(entry => {\n          setPersons(persons.map(person => person.id !== id ? person : numberObject))\n          setNewName('')\n          setNewNumber('')\n          setErrorMessage(`${newName}'s number updated`)\n          setNotificationType('success')\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n        }\n        )\n        .catch(error => {\n          setErrorMessage(`Note '${newName}' was already removed from server`)\n          setNotificationType('error')\n\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n          setPersons(persons.filter(person => person.id !== id))\n        })\n    } else {\n      personService\n        .create(numberObject)\n        .then(entry => {\n          console.log(entry)\n          setPersons(persons.concat(entry))\n          setNewName('')\n          setNewNumber('')\n          setErrorMessage(`${newName} added`)\n          setNotificationType('success')\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n        })\n        .catch(error => {\n          setErrorMessage(error.response.data.error)\n          setNotificationType('error')\n\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n\n        })\n    }\n  }\n\n  const handleNameChange = (event) => setNewName(event.target.value)\n  const handleNumberChange = (event) => setNewNumber(event.target.value)\n  const handleFilterChange = (event) => setFilter(event.target.value)\n\n  const filterNames = () => {\n    if (filter === '') return persons\n    const list = persons.filter(person => person.name.toLowerCase().includes(filter.toLowerCase()))\n    if (list.length === 0) return [{ name: 'No entries found' }]\n    return list\n  }\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={errorMessage} type={notificationType} />\n      <Filter\n        filter={filter}\n        handler={handleFilterChange}\n      />\n      <h2>add a new</h2>\n      <Form\n        onSubmit={addNumber}\n        nameValue={newName}\n        nameHandler={handleNameChange}\n        numberValue={newNumber}\n        numberHandler={handleNumberChange}\n      />\n      <Numbers callback={filterNames} deleted={delNumber} />\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}